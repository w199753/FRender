// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenRelfectMap
#pragma kernel GenReflectMapDepthTest

#include "../../Shader/InputMacro.hlsl"
#include "../../Shader/UnityBuiltIn.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float4 _ScreenSizeInfo;
Texture2D<float4> _DepthNormal;
Texture2D<float4>_CameraDepthTex;
Texture2D<float4> _ScreenColor;
RWTexture2D<float4> _Result;

#define sampler_MainTex SamplerState_Point_Clamp
SAMPLER(sampler_MainTex);
float4x4 _CamearP;
float4x4 _CamearVP;
inline half InverseLinear01( float depth01 )
{
    return (1.0-_ZBufferParams.y*depth01)/(depth01*_ZBufferParams.x);
}
inline float linear01( float z )
{
    return 1.0 / (_ZBufferParams.x * z + _ZBufferParams.y);
}

float3 TransformPositionCSToWS(float3 positionCS){
    //_MatrixInvVP为VP的逆矩阵
    float4 positionWS = mul(_CamearP,float4(positionCS,1));
    positionWS /= positionWS.w;
    return positionWS.xyz;
}

float3 ReconstructPositionWS(float2 uv, float depth){
    //使用uv和depth，可以得到ClipSpace的坐标
    float3 positionCS = float3(uv * 2 -1,depth);
    //然后将坐标从ClipSpace转换到世界坐标
    float3 positionWS = TransformPositionCSToWS(positionCS);
    return positionWS;
}

float3 Reproject(float3 positionWS){
    float4 positionCS = mul(_CamearVP,float4(positionWS,1));
    positionCS /= positionCS.w;
    positionCS.xy = (positionCS.xy + 1) * 0.5;
    return positionCS.xyz;
}

//返回float4的xyz分量为镜像坐标，w为坐标到平面的距离平方
float4 GetMirrorPositionWS(float3 positionWS){
    float normalProj = dot(positionWS - float3(0,0,0),float3(0,1,0));
    return float4(positionWS - normalProj * float3(0,1,0) * 2,normalProj);
    //return float4(positionWS.x,-positionWS.y,positionWS.z,normalProj);
}


[numthreads(8,8,1)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    _Result[id.xy] = float4(0,0,0,0);
}


float4 GetMirrorPositionWSFromID(uint3 id){
    float2 pixelCoord = id.xy;
    float2 uv = id.xy /2048.0;
    float depth01 = _DepthNormal[id.xy].a;
    depth01 = _DepthNormal.SampleLevel(sampler_MainTex,uv,0);
    
    //float Y = R * 0.299 + G * 0.587 + B * 0.114; // RGB 轉 灰階
    float depth = _CameraDepthTex.SampleLevel(sampler_MainTex,uv,0).r; 
    //depth = 1.0 - depth;
    //depth = pow(depth,0.45);
        #if UNITY_REVERSED_Z
        //判定无穷远
        if(depth == 0)
        #else
        if(depth == 1)
        #endif
        {
            return float4(0,0,0,0);
        }
    float3 positionWS = ReconstructPositionWS(uv,depth);
    float4 mirrorPositionWS = GetMirrorPositionWS(positionWS);  
    return mirrorPositionWS;
}

float3 GetMirrorUVDepthFromID(uint3 id){
    float4 mirrorPositionWS = GetMirrorPositionWSFromID(id);
    if(mirrorPositionWS.w > 0.01){
        float3 uvAndDepth = Reproject(mirrorPositionWS.xyz);
        return uvAndDepth;
    }else{ 
        return float3(0,0,0);
    }
}

[numthreads(8,8,1)]
void GenRelfectMap (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy;
    //uv.y = 2048-uv.y;
    //float2 uv = (id.xy + 0.5) * 128 - 1.0;
    // TODO: insert actual code here!
    // float R = _DepthNormal[id.xy].r;
    // float G = _DepthNormal[id.xy].g;
    // float B = _DepthNormal[id.xy].b;
    // float A = _DepthNormal[id.xy].a;
     //float Y = R * 0.299 + G * 0.587 + B * 0.114; // RGB 轉 灰階

_Result[uv] = 0;
    float depth01 = _DepthNormal[id.xy].a;
    float depth = _CameraDepthTex.SampleLevel(sampler_MainTex,uv/2048.0,0).r; 
    depth = _DepthNormal.SampleLevel(sampler_MainTex,uv/2048.0,0).a;
    depth = InverseLinear01(depth);

    //depth = _DepthNormal.SampleLevel(sampler_MainTex,uv/2048.0,0);
//depth = (1.0/depth - _ZBufferParams.y) /_ZBufferParams.x ;
    float2 uv2 = id.xy / 2048.0;
    //_Result[id.xy] = linear01(ddd);
     float4 worldPos = ReconstructPositionWS(uv2,depth).xyzz;
     //depth = 1.0-depth;
     //depth = depth*2.0 - 1.0;
    float4 ndc = float4((uv2.x)*2.0-1.0,(uv2.y)*2.0-1.0,depth,1.0); 
    worldPos = mul(_CamearP,ndc);
     worldPos /= worldPos.w;
    //   float4 mirrorPositionWS = GetMirrorPositionWS(worldPos);  
    //   if(mirrorPositionWS.w>0.1)
    //   {
    //   float3 uvAndDepth = Reproject(mirrorPositionWS.xyz);
    // //_Result[uv] = float4(uvAndDepth.xy,1,1);
    // //_Result[uv] = worldPos;
    // //_Result[uv] = _ScreenColor[uvAndDepth.xy*2048];
    // _Result[uvAndDepth.xy * 2048] = float4(_ScreenColor[uv].rgb,uvAndDepth.z);
    //     if(depth >=1||depth<=0)
    //     _Result[uvAndDepth.xy * 2048] = 0;
    //   }else
    //   {
    //       _Result[uv] = 0;
    //   }
    
    //float2 mirrorPixelCoord = uvAndDepth.xy * 2048;
    //_Result[mirrorPixelCoord] = float4(_ScreenColor[uv].rgb,uvAndDepth.z);
    
    //_Result[uv] = depth;
    //_Result[mirrorPixelCoord] = depth;
    // _Result[uv] = float4(uvAndDepth.xy,1,1);
    //uv.y = 2048-uv.y;
    ////float2 uv = id.xy;

     float3 mirrorUVAndDepth = GetMirrorUVDepthFromID(id);
     float2 mirrorPixelCoord = mirrorUVAndDepth.xy * 2048;
     _Result[mirrorPixelCoord] = float4(_ScreenColor[uv].rgb,mirrorUVAndDepth.z);
}

[numthreads(8,8,1)]
void GenReflectMapDepthTest(uint3 id:SV_DISPATCHTHREADID)
{
    float2 uv = id.xy;
    float3 mirrorUVAndDepth = GetMirrorUVDepthFromID(id);
    float2 toPixelCoord = mirrorUVAndDepth.xy * 2048;
    float4 originalColor = _Result[toPixelCoord];
 
    #if UNITY_REVERSED_Z
    bool overwrite = mirrorUVAndDepth.z > originalColor.a;
    #else
    bool overwrite = mirrorUVAndDepth.z < originalColor.a;
    #endif
    if(overwrite){
        _Result[toPixelCoord] = float4(_ScreenColor[uv].rgb,1);
    }else{
        _Result[toPixelCoord] = float4(originalColor.rgb,1);
    }
    //    if(originalColor.a >1||originalColor.a<=0)
    //_Result[toPixelCoord] = float4(_ScreenColor[uv].rgb,1);
}
