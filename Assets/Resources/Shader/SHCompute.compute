// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SHCompute

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"
#include "../../Shader/Montcalo_Library.hlsl" 
#include "../../Shader/FRP_SH.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<int3> Result;

StructuredBuffer<float3> SampleDirs;

TextureCube<float3> CubeMap; 
SamplerState samplerCubeMap;

[numthreads(1024,1,1)]
void SHCompute (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float3 dir = SampleDirs[id.x];
    uint3 p1 = ReverseBits32(asuint(dir.xy));
	uint2 p2 = (abs(dir.z) > abs(dir.y)) ? p1.zx : p1.zy;
	p2 = (p2 << 16) | (p2 >> 16);
	p2 = ((p2 & 0x33333333) << 2) | ((p2 & 0xcccccccc) >> 2);
	p2 = ((p2 & 0x0f0f0f0f) << 4) | ((p2 & 0xf0f0f0f0) >> 4);
	uint2 p = p1.xy + p2;

	float3 radians = 0;
	float3 tangent = 0; 
	if (abs(dir.y) > 0.7) {
		tangent = cross(float3(0, 0, 1), dir);
	}
	else {
		tangent = cross(float3(0, 1, 0), dir);
	}
	float3 bi = cross(tangent, dir);

	half3x3 TangentToWorld = half3x3(tangent, bi, dir);
    
    for (int i = 0; i < 128; i++)
	{
		float2 random = Hammersley(i, 128, p);
		float3 v = mul(UniformSampleHemisphere(random).xyz, TangentToWorld);
		//radians += SSSS(v);
        //radians += SAMPLE_TEXTURECUBE_LOD(unity_SpecCube0,samplerunity_SpecCube0 , v, 0);
		radians += CubeMap.SampleLevel(samplerCubeMap, v, 0);
	}
	radians /= 128;
	radians *= 10000;

	SH9 sh = SHCosineLobe(dir);

	//[unroll]
	for (uint i = 0; i < 9; ++i)
	{
		int3 value = (int3)(sh.c[i] * radians);
		InterlockedAdd(Result[i].x, value.x);
		InterlockedAdd(Result[i].y, value.y);
		InterlockedAdd(Result[i].z, value.z);
	} 
    //DecodeHDREnvironment(, unity_SpecCube0_HDR);
}
